package types

import (
	"strconv"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

const (
	// OPEN denotes the status when a job request is open for offerings
	OPEN = "OPEN"

	// ONGOING denotes the status when a job request is in progress
	ONGOING = "ONGOING"

	// COMPLETED denotes the status when a job request is successfully completed
	COMPLETED = "COMPLETED"

	// DELETED denotes the status when a job request is removed by the client who posted it
	DELETED = "DELETED"
)

// Location denotes the location of the job request
type Location struct {
	// Always "Point"
	Type       string `json:"-" bson:"type,omitempty"`
	Latitude   string `json:"latitude" bson:"latitude,omitempty" valid:"required,latitude"`
	Longtitude string `json:"longitude" bson:"longitude,omitempty" valid:"required,longitude"`
	// Coordinates are in the form of [longitude, latitude] according to GeoJSON specifications
	Coordinates []float64 `json:"-" bson:"coordinates,omitempty"`
	AdminArea1  string    `json:"administrative_area_level_1" bson:"administrative_area_level_1,omitempty" valid:"required"`
	AdminArea2  string    `json:"administrative_area_level_2" bson:"administrative_area_level_2,omitempty"`
	Country     string    `json:"country" bson:"country,omitempty" valid:"required"`
	Locality    string    `json:"locality" bson:"locality,omitempty"`
	PostalCode  string    `json:"postal_code" bson:"postal_code,omitempty"`
	Route       string    `json:"route" bson:"route,omitempty" valid:"required"`
	Street      string    `json:"street_number" bson:"street_number,omitempty"`
}

// Offer stores the information of offers made by vendors to a post
type Offer struct {
	// Name of the vendor making the offer
	Name    string    `json:"name" bson:"name"`
	Created int64     `json:"created" bson:"created"`
	Content Inventory `json:"content" bson:"content"`
	// The fees charged for the vendor's services in indian rupees per day
	Rate float64 `json:"rate" bson:"rate"`
}

// Post stores the information about a job request
type Post struct {
	ID primitive.ObjectID `json:"_id,omitempty" bson:"_id,omitempty"`
	// Email ID of the owner of the post
	Owner string `json:"owner,omitempty" bson:"owner"`
	// Name of the owner of the post
	OwnerName string `json:"owner_name,omitempty" bson:"owner_name"`
	// Short summary of the post
	Name        string   `json:"name" bson:"name" valid:"required,stringlength(5|100)~Field 'name' should have length between 5 to 100 characters"`
	Description string   `json:"description" bson:"description" valid:"required"`
	Location    Location `json:"location" bson:"location" valid:"required"`

	// Infrastructure required by the client
	// This is dynamic and shall change as offers are accepted/rejected
	Requirements Inventory `json:"requirements" bson:"requirements" valid:"required"`

	// Additional information accompanying the post's requirements
	// Ex:- A client needs 500 tonnes crane so he can specify that within comments
	Comments map[string]string `json:"comments" bson:"comments"`

	// In the form of <encrypted email ID of the vendor offering the deal>:<the contents of the offer>
	Offers map[string]Offer `json:"offers,omitempty" bson:"offers,omitempty"`

	// In the form of <encrypted email ID of the vendor offering the deal>:<the contents of the offer>
	// When offers are accepted by the client, they are moved here
	AcceptedOffers map[string]Offer `json:"accepted_offers,omitempty" bson:"accepted_offers,omitempty"`

	// Status can be either OPEN, ONGOING, COMPLETED or DELETED
	Status  string `json:"status" bson:"status"`
	Created int64  `json:"created" bson:"created"`
	Updated int64  `json:"-" bson:"updated"`
}

// Initialize initializes the post parameters during its creation
func (post *Post) Initialize() error {
	// Set ID to empty string so that it can be auto-generated by mongoDB
	post.ID = primitive.ObjectID{}

	// Default maps
	post.Offers = make(map[string]Offer)
	post.AcceptedOffers = make(map[string]Offer)

	// Location
	latitude, err := strconv.ParseFloat(post.Location.Latitude, 64)
	if err != nil {
		return err
	}
	longitude, err := strconv.ParseFloat(post.Location.Longtitude, 64)
	if err != nil {
		return err
	}
	post.Location.Coordinates = []float64{longitude, latitude}
	post.Location.Type = "Point"

	// Timestamp
	post.Created = time.Now().Unix()
	post.Updated = time.Now().Unix()

	// Status
	post.Status = OPEN

	return nil
}

// UpdateTimestamp updates the post's timestamp
func (post *Post) UpdateTimestamp() {
	post.Updated = time.Now().Unix()
}

// SetOwner sets the owner in the post's context
func (post *Post) SetOwner(ownerEmail string) {
	post.Owner = ownerEmail
}

// SetOwnerName sets the owner's name in the post's context
func (post *Post) SetOwnerName(name string) {
	post.OwnerName = name
}

// PostUpdate stores the information about a job request which can be updated
type PostUpdate struct {
	Description string    `json:"description,omitempty" bson:"description,omitempty"`
	Location    *Location `json:"location,omitempty" bson:"location,omitempty"`
	// Infrastructure required by the client
	Requirements Inventory `json:"requirements,omitempty" bson:"requirements,omitempty"`
}

// InitializeLocation initializes the post update location paramters
func (postUpdate *PostUpdate) InitializeLocation() error {
	// Location
	latitude, err := strconv.ParseFloat(postUpdate.Location.Latitude, 64)
	if err != nil {
		return err
	}
	longitude, err := strconv.ParseFloat(postUpdate.Location.Longtitude, 64)
	if err != nil {
		return err
	}
	postUpdate.Location.Coordinates = []float64{longitude, latitude}
	postUpdate.Location.Type = "Point"

	return nil
}

// PostStatus is a low memory footprint struct for retrieving the status of a post
type PostStatus struct {
	// Value can be either OPEN, ONGOING, COMPLETED or DELETED
	Value string `json:"-" bson:"status"`
}

// PostName is a low memory footprint struct for retrieving the name of a post
type PostName struct {
	Value string `json:"-" bson:"name"`
}

// PostNameAndOwner is a low memory footprint struct for retrieving the name and owner of a post
type PostNameAndOwner struct {
	Name  string `json:"-" bson:"name"`
	Owner string `json:"-" bson:"owner"`
}
